BlueNRG 1/2 Software PWM signals

Brief: This demo shows how three independent PWM signals can be generated driving GPIO pins inside MFT
interrupt handlers.

Description: In BlueNRG 1/2, MFT in mode_1 can be used to generate at hardware level a PWM signal programming
the two reload registers according to the desired values of period and duty cycle. In mode_1, MFT has another
simple timer with only one reload register. This timer can be used to mimic at software level the automatic
register reloading that occurs at hardware level to create the square signal. It means that at each timer trigger,
a GPIO is toggled inside the timer handler and the timer itself is reprogrammed.
BlueNRG 1/2 has two MFTs. Therefore, using this approach two software PWM signals can be created.
In order to create a third signal, a timer must manage two PWM channels. In order to accomplish this task a
state machine can be adopted inside the interrupt handler. 

Limitations. 
1) The signals generated at software level cannot be as accurate as those generated by the hardware.
It happens because the toggling of the GPIO does not occur exactly when the timer expires since 
the core performs some operations before calling the interrupt handler. This delay can be measured
and then compensated when the timer is programmed.So, this delay can be canceled.
However, this compensation factor should be smaller than the smallest Ton admitted in the application.
The delay is smaller if the 32 MHz XTAL is adopted.
2) It could happen that Ton or Toff are smaller than the time the core uses to exit and return in the interrupt
handler. In this case the application should wait inside the interrupt handler until Ton or Toff are expired.
3) PWM vs Stack. Radio operations interfer with PWM handlers producing a jitter that cannot be compensated and
that will be present in each case. Probably it could be neglected but it depends on the application.
An experimental test highlighted that even if no radio operations are scheduled but the BTLE_StackTick is called,
the jitter is present in same way. This is probably an effect of the interrupt enabling and disabling operation
that the stack performs.